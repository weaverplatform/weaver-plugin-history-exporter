// Generated by CoffeeScript 1.10.0
(function() {
  var HistoryExporterService, Promise, config, express, fileService, fs, logger, request, tracker;

  request = require('request');

  fs = require('fs');

  logger = require('logger');

  config = require('config');

  express = require('express');

  fileService = require('FileService');

  Promise = require('bluebird');

  tracker = require('Tracker');

  HistoryExporterService = (function() {
    function HistoryExporterService(fileName, projectId) {
      this.fileName = fileName;
      this.projectId = projectId;
      this.excelMicroserviceEndpoint = config.get('weaver-plugin-history-exporter.services.excelMicroservice');
      this.sheet = {
        0: {
          0: {}
        }
      };
      this.dir = 'uploads';
      logger.code.debug("" + (config.get('weaver-plugin-history-exporter.services.excelMicroservice')));
      logger.code.debug(fileName);
      logger.code.debug(projectId);
    }

    HistoryExporterService.prototype.excelDumpAll = function() {
      var error, error1, promises;
      try {
        promises = [];
        request.payload = {};
        return tracker.getHistoryFor(request).then((function(_this) {
          return function(rows) {
            promises.push(_this.extractHeaders(rows[0]));
            promises.push(_this.extractData(rows));
            return Promise.all(promises).then(function() {
              return _this.createExcelReport().then(function(path) {
                return fileService.uploadFileStream(path, _this.fileName, _this.projectId).then(function(res) {
                  logger.code.debug("The answer of Minio: " + res);
                  return res;
                });
              });
            })["catch"](function(err) {
              return logger.code.error(err);
            });
          };
        })(this));
      } catch (error1) {
        error = error1;
        return logger.code.error(error);
      }
    };

    HistoryExporterService.prototype.extractData = function(rows) {
      var i, index, j, key, len, results, row, value;
      results = [];
      for (index = j = 0, len = rows.length; j < len; index = ++j) {
        row = rows[index];
        this.sheet[0][index + 1] = {};
        i = 0;
        for (key in row) {
          value = row[key];
          this.sheet[0][index + 1]["" + i] = {
            value: value,
            type: 'String'
          };
          i++;
        }
        results.push(Promise.resolve());
      }
      return results;
    };

    HistoryExporterService.prototype.extractHeaders = function(row) {
      var i, key, value;
      i = 0;
      for (key in row) {
        value = row[key];
        this.sheet[0][0]["" + i] = {
          value: key,
          type: 'String'
        };
        i++;
      }
      return Promise.resolve();
    };

    HistoryExporterService.prototype.createExcelReport = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var error, error1, fileStream;
          try {
            fileStream = fs.createWriteStream(_this.dir + "/" + _this.fileName);
            request.post({
              url: _this.excelMicroserviceEndpoint + "/excel/create?fileName=" + _this.fileName,
              headers: {
                "content-type": "application/json"
              },
              json: _this.sheet
            }, function(err, httpResponse, body) {
              if (err) {
                return logger.code.error(err);
              }
            }).pipe(fileStream);
            fileStream.on('close', function() {
              return resolve(_this.dir + "/" + _this.fileName);
            });
            return fileStream.on('error', function() {
              return reject();
            });
          } catch (error1) {
            error = error1;
            return reject();
          }
        };
      })(this));
    };

    return HistoryExporterService;

  })();

  module.exports = HistoryExporterService;

}).call(this);
